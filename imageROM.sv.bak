module imageROM (
    input logic [3:0] addRom,
    output logic [31:0] dataRom
);

    // Definición de la ROM como un array de 16 entradas de 32 bits
    logic [31:0] rom [15:0];

    // Inicializar los datos directamente en el bloque initial
    initial begin
	     rom[0]  = 32'b00000000000000000000000000000000;
        rom[1]  = 32'b00000000000000000000000000000000;
        rom[2]  = 32'b00001111111000000000000000000000;
        rom[3]  = 32'b00000011111000000000000000000000;
        rom[4]  = 32'b00000000111100000000000000000000;
        rom[5]  = 32'b00010001111110011111111111100000;
        rom[6]  = 32'b00011001111111111001100110011000;
        rom[7]  = 32'b00011111111111111001100110011110;
        rom[8]  = 32'b00011111111111111111111111111111;
        rom[9]  = 32'b00011111110000000000000000011111;
        rom[10] = 32'b00011001111111111111111111110000;
        rom[11] = 32'b00010001111111111111111111000000;
        rom[12] = 32'b00000000111110000000000000000000;
        rom[13] = 32'b00001111110000000000000000000000;
        rom[14] = 32'b00000000000000000000000000000000;
        rom[15] = 32'b00000000000000000000000000000000;

    end

    // Asignación de la salida a partir de la dirección
    assign dataRom = rom[addRom];

endmodule